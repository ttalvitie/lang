@coordOffset = 1000000000;

@retY = 0;
parseStr(inputLine(), "%u", &retY);

@minCoord = 0;
@maxCoord = 0;
parseStr(inputLine(), "%u", &maxCoord);

retY = retY + coordOffset;
minCoord = minCoord + coordOffset;
maxCoord = maxCoord + coordOffset;

@Item.sx = [item]{ item };
@Item.sy = [item]{ item + 4 };
@Item.bx = [item]{ item + 8 };
@Item.by = [item]{ item + 12 };
@Item.sizeof = 16;

@EventType.beacon = 0;
@EventType.start = 1;
@EventType.end = 2;
@EventType.boundary = 3;

@Event.x = [event]{ event };
@Event.type = [event]{ event + 4 };
@Event.sizeof = 8;

@items = Vector.init(Item.sizeof);

runWhileTrue({
    @line = inputLine();
    ifElse0(get8(line), {
        @sxStr = 0;
        @syStr = 0;
        @bxStr = 0;
        @byStr = 0;
        parseStr(line, "Sensor at x=%s, y=%s: closest beacon is at x=%s, y=%s", &sxStr, &syStr, &bxStr, &byStr);

        @parseCoord = [str]{
            @coord = 0;
            if(!tryParseStr(str, "%u", &coord), {
                parseStr(str, "-%u", &coord);
                coord = 0 - coord
            });
            coord = coord + coordOffset;
            coord
        };
        @sx = parseCoord(sxStr);
        @sy = parseCoord(syStr);
        @bx = parseCoord(bxStr);
        @by = parseCoord(byStr);

        @item = Vector.push(items);
        *Item.sx(item) = sx;
        *Item.sy(item) = sy;
        *Item.bx(item) = bx;
        *Item.by(item) = by;

        1
    })
});

@genEvents = [y, enableBeaconEvents, enableBoundaryEvents]{
    @events = Vector.init(Event.sizeof);

    forRange(0, Vector.size(items), [i]{
        @item = Vector.item(items, i);

        @sx = *Item.sx(item);
        @sy = *Item.sy(item);
        @bx = *Item.bx(item);
        @by = *Item.by(item);

        if(enableBeaconEvents && by == y, {
            @event = Vector.push(events);
            *Event.x(event) = bx;
            *Event.type(event) = EventType.beacon
        });

        @d = absDiff(sx, bx) + absDiff(sy, by);

        @diffY = absDiff(sy, y);
        if(diffY <= d, {
            @event = Vector.push(events);
            *Event.x(event) = sx + diffY - d;
            *Event.type(event) = EventType.start;
            event = Vector.push(events);
            *Event.x(event) = sx + d - diffY + 1;
            *Event.type(event) = EventType.end
        })
    });

    if(enableBoundaryEvents, {
        @event = Vector.push(events);
        *Event.x(event) = minCoord;
        *Event.type(event) = EventType.boundary;
        event = Vector.push(events);
        *Event.x(event) = maxCoord;
        *Event.type(event) = EventType.boundary
    });

    Vector.sort(events, [a, b]{
        *Event.x(a) < *Event.x(b)
    });

    events
};

@solve1 = {
    @events = genEvents(retY, 1, 0);

    @ret = 0;

    @prevX = 0;
    @activeCount = 0;
    @beaconCount = 0;
    @prevBeacon = 0;
    forRange(0, Vector.size(events), [i]{
        @event = Vector.item(events, i);
        @type = *Event.type(event);
        @x = *Event.x(event);
        if(i == 0, {
            prevX = x
        });

        @advance = x - prevX;
        if(activeCount != 0 && advance != 0, {
            ret = ret + advance - beaconCount;
            beaconCount = 0
        });

        ifChain(
            { type == EventType.beacon }, {
                if(x != prevBeacon, {
                    beaconCount = beaconCount + 1;
                    prevBeacon = x
                })
            },
            { type == EventType.start }, {
                activeCount = activeCount + 1
            },
            { type == EventType.end }, {
                activeCount = activeCount - 1
            },
            { assert(0) }
        );
        prevX = x
    });
    assert(activeCount == 0);

    ret
};

@printLargeMul = [x, y]{
    @modulus = 1000000000;
    @low = 0;
    @high = 0;
    forRange(0, x, [i]{
        low = low + y;
        while({ low >= modulus }, {
            high = high + 1;
            low = low - modulus
        })
    });
    ifElse(high, {
        print("%u", high);
        printL("%s", decToStr(low + modulus) + 1)
    }, {
        printL("%u", low)
    })
};

@solve2 = {
    @found = 0;

    forRange(minCoord, maxCoord + 1, [y]{
        @events = genEvents(y, 0, 1);

        @prevX = 0;
        @activeCount = 0;
        forRange(0, Vector.size(events), [i]{
            @event = Vector.item(events, i);
            @type = *Event.type(event);
            @x = *Event.x(event);
            if(i == 0, {
                prevX = x
            });

            @advance = x - prevX;
            if(activeCount == 0 && advance != 0 && minCoord < x <= maxCoord, {
                assert(advance == 1);
                assert(!found);
                found = 1;

                @modulus = 1000000;
                @high = 4 * (x - 1 - minCoord);
                @low = y - minCoord;
                while({ low >= modulus }, {
                    low = low - modulus;
                    high = high + 1
                });
                ifElse(high, {
                    print("%u", high);
                    printL("%s", decToStr(low + modulus) + 1)
                }, {
                    printL("%u", low)
                })
            });

            ifChain(
                { type == EventType.start }, {
                    activeCount = activeCount + 1
                },
                { type == EventType.end }, {
                    activeCount = activeCount - 1
                },
                { assert(type == EventType.boundary) }
            );
            prevX = x
        })
    });

    assert(found)
};

printL("%u", solve1());
solve2();

0
