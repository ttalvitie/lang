@Number.val = [number]{ number };
@Number.prev = [number]{ number + 4 };
@Number.next = [number]{ number + 8 };
@Number.sizeof = 12;

@numbers = Vector.init(Number.sizeof);

runWhileTrue({
    @line = inputLine();
    ifElse0(get8(line), {
        @val = 0;
        if(!tryParseStr(line, "%u", &val), {
            parseStr(line, "-%u", &val);
            val = 0 - val
        });
        @number = Vector.push(numbers);
        *Number.val(number) = val;
        1
    })
});

@n = Vector.size(numbers) - 1;
@head = Vector.item(numbers, 0);

@prev = Vector.item(numbers, n);
forRange(0, n + 1, [i]{
    @p = Vector.item(numbers, i);
    *Number.prev(p) = prev;
    prev = p
});
@next = head;
forRevRange(0, n + 1, [i]{
    @p = Vector.item(numbers, i);
    *Number.next(p) = next;
    next = p
});

Vector.forEach(numbers, [number]{
    @val = *Number.val(number);
    @steps = 0;
    ifElse(val >= #80000000, {
        steps = (0 - (0 - val) % n) + n
    }, {
        steps = val % n
    });

    @pos = *Number.next(number);
    if(head == number, {
        head = pos
    });

    prev = *Number.prev(number);
    *Number.next(prev) = pos;
    *Number.prev(pos) = prev;

    forRange(0, steps, [i]{
        pos = *Number.next(pos)
    });

    prev = *Number.prev(pos);
    *Number.next(prev) = number;
    *Number.prev(pos) = number;
    *Number.prev(number) = prev;
    *Number.next(number) = pos
});

@pos = 0;
Vector.forEach(numbers, [number]{
    if(*Number.val(number) == 0, {
        pos = number
    })
});
assert(pos != 0);

@ret = 0;
forRange(0, 3, [i]{
    forRange(0, 1000, [j]{
        pos = *Number.next(pos)
    });
    ret = ret + *Number.val(pos)
});

printL("%u", ret);

0
