@valveCount = 0;
@valveIdxs = Vector.init(4);
forRange(0, 26 * 26, [i]{
    *Vector.push(valveIdxs) = 0 - 1
});

@Valve.flow = [valve]{ valve };
@Valve.tunnels = [valve]{ valve + 4 };
@Valve.bit = [valve]{ valve + 8 };
@Valve.sizeof = 12;

@valves = Vector.init(Valve.sizeof);

@valveNameToIdx = [name]{
    assert(strLen(name) == 2);
    @a = get8(name);
    @b = get8(name + 1);
    assert(charNum("A") <= a <= charNum("Z"));
    assert(charNum("A") <= b <= charNum("Z"));
    @i = 26 * (a - charNum("A")) + (b - charNum("A"));
    @pIdx = Vector.item(valveIdxs, i);
    if(*pIdx == 0 - 1, {
        *pIdx = valveCount;
        valveCount = valveCount + 1;
        @valve = Vector.push(valves);
        *Valve.flow(valve) = 0;
        *Valve.tunnels(valve) = Vector.init(4)
    });
    *pIdx
};

@bitFlow = Vector.init(4);

runWhileTrue({
    @line = inputLine();
    ifElse0(get8(line), {
        @name = 0;
        @flow = 0;
        @tunnelList = 0;
        if(!tryParseStr(line, "Valve %s has flow rate=%u; tunnels lead to valves %s", &name, &flow, &tunnelList), {
            parseStr(line, "Valve %s has flow rate=%u; tunnel leads to valve %s", &name, &flow, &tunnelList)
        });

        @valveIdx = valveNameToIdx(name);
        @valve = Vector.item(valves, valveIdx);
        *Valve.flow(valve) = flow;
        @tunnels = *Valve.tunnels(valve);

        if(flow > 0, {
            *Valve.bit(valve) = shiftLeft(1, Vector.size(bitFlow));
            *Vector.push(bitFlow) = flow
        });

        runWhileTrue({
            @tunnel = 0;
            @continue = ifElse1(!tryParseStr(tunnelList, "%s, %s", &tunnel, &tunnelList), {
                parseStr(tunnelList, "%s", &tunnel);
                0
            });
            @tunnelIdx = valveNameToIdx(tunnel);
            *Vector.push(tunnels) = tunnelIdx;
            continue
        });

        1
    })
});

@solve = [teamSize, minuteCount]{
    printL("%u", 0)
};

solve(1, 30);
solve(2, 26);

0
