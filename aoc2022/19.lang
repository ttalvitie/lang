@processBlueprint = [blueprintId, orePerOreRobot, orePerClayRobot, orePerObsidianRobot, clayPerObsidianRobot, orePerGeodeRobot, obsidianPerGeodeRobot]{
    @State.ore = [state]{ state };
    @State.clay = [state]{ state + 4 };
    @State.obsidian = [state]{ state + 8 };
    @State.oreRobots = [state]{ state + 12 };
    @State.clayRobots = [state]{ state + 16 };
    @State.obsidianRobots = [state]{ state + 20 };
    @State.geodeRobots = [state]{ state + 24 };
    @State.time = [state]{ state + 28 };
    @State.sizeof = 32;
    @State.init = {
        @ret = brk;
        brk = brk + State.sizeof,
        ret
    };

    @initState = State.init();
    @State.ore(initState) = 0;
    @State.clay(initState) = 0;
    @State.obsidian(initState) = 0;
    @State.oreRobots(initState) = 1;
    @State.clayRobots(initState) = 0;
    @State.obsidianRobots(initState) = 0;
    @State.geodeRobots(initState) = 0;
    @State.time(initState) = 0;

//    aStar(initState, reuseHashtable, isEndFunc, neighborFunc, heuristicFunc, nodeHashFunc, nodeEqFunc]
    0
};

runWhileTrue({
    @line = inputLine();
    ifElse0(get8(line), {
        @blueprintId = 0;
        @orePerOreRobot = 0;
        @orePerClayRobot = 0;
        @orePerObsidianRobot = 0;
        @clayPerObsidianRobot = 0;
        @orePerGeodeRobot = 0;
        @obsidianPerGeodeRobot = 0;

        parseStr(line, "Blueprint %u: Each ore robot costs %u ore. Each clay robot costs %u ore. Each obsidian robot costs %u ore and %u clay. Each geode robot costs %u ore and %u obsidian.", &blueprintId, &orePerOreRobot, &orePerClayRobot, &orePerObsidianRobot, &clayPerObsidianRobot, &orePerGeodeRobot, &obsidianPerGeodeRobot);

        processBlueprint(blueprintId, orePerOreRobot, orePerClayRobot, orePerObsidianRobot, clayPerObsidianRobot, orePerGeodeRobot, obsidianPerGeodeRobot);

        1
    })
});

0
